---
import AppLayout from '../../components/app/AppLayout.astro';
import { Root } from '../../components/app/Root';
import { createRouterContext } from '../../lib/router';
import { getGeneratorForPromptUrl } from '../og';

export const prerender = false; // to enable dynamic routing

const res = await createRouterContext(Astro);
if (res.kind === 'response') {
	return res.response;
}

const x = await res.helpers.prompts.getPrompt
	.fetch({ promptId: Astro.params.promptId! })
	.then((prompt) => ({ kind: 'ok' as const, prompt }))
	.catch((error) => ({ kind: 'error' as const, error }));

const title = (x.kind === 'ok' && x.prompt.prompt.title) || 'Prompts with Friends';
const { description, chatTemplate } = (() => {
	if (x.kind !== 'ok') {
		return { description: 'Failed to fetch', chatTemplate: '' };
	}
	const { prompt, author } = x.prompt;
	let chatTemplate = '';
	for (const line of prompt.template) {
		if (line.content.trim() === '') {
			continue;
		}
		const who = line.role === 'user' ? 'You' : line.role === 'system' ? 'System' : 'Assistant';
		chatTemplate += `${who}: ${limitText(line.content)}\n`;
		const newChatTemplate = limitText(chatTemplate, 700);
		if (newChatTemplate !== chatTemplate) {
			chatTemplate = newChatTemplate;
			break;
		}
	}
	const authorName = author.name || author.userId;
	return { description: prompt.description + ' by ' + authorName, chatTemplate };
})();
function limitText(test: string, limit = 130) {
	if (test.length > limit + 3) {
		return test.slice(0, limit) + '...';
	}
	return test;
}
const ogImage = getGeneratorForPromptUrl({
	origin: Astro.url.origin,
	title: title.repeat(1),
	description,
	chatTemplate,
});
---

<AppLayout title={title} ogImage={ogImage}>
	<Root client:load dehydratedState={res.helpers.dehydrate()} getContext={() => res.context} />
</AppLayout>
