---
import { CollectionEntry, getEntryBySlug } from 'astro:content';
import { websiteTitle } from '../../constants';
import Layout from '../../layouts/Layout.astro';

export const prerender = true;

type SetupSlug = CollectionEntry<'setup'>['slug'];
const checksOrder: SetupSlug[] = [
	'doppler',
	'doppler_tutorial',
	'propelauth',
	'supabase',
	'fogbender',
	'posthog',
	'production',
];

let firstFail = ''; // debug with: let firstFail = 'fogbender';
---

<Layout title={'Set up your own ' + websiteTitle}>
	<main class="container">
		<h1>Set up your own <span class="text-gradient">{websiteTitle}</span></h1>
		<div class="instructions sl-waiting">
			{
				import.meta.env.PROD && (
					<p class="text-gray-600 border-b border-gray-200 pb-2 mb-2">
						Please note that you are looking at production build of the app, so make necessary
						changes to the commands depending on if you want to change the production or development
						build. Keep in mind that changes to production configuration require you to re-deploy
						the app.
					</p>
				)
			}
			<h3>Setup steps:</h3>
			{
				checksOrder.map(async (slug, i) => {
					const step = await getEntryBySlug('setup', slug);
					const { Content } = await step.render();
					const havePassed = step.data.needsEnv?.every(
						(x) => (process.env[x] || import.meta.env[x]) !== undefined
					);
					if (!havePassed && firstFail == '') {
						firstFail = step.slug;
					}
					return (
						<sl-details open={firstFail === step.slug}>
							<h3 slot="summary" class="text-gray-600">
								<span class="w-4 inline-block">{i + 1}.</span> {havePassed ? 'âœ… ' : ''}
								{step.data.title || step.slug}
							</h3>
							<div class="prose max-w-none">
								<Content />
							</div>
						</sl-details>
					);
				})
			}
		</div>
	</main>
</Layout>

<script
	type="module"
	src="https://cdn.jsdelivr.net/npm/@shoelace-style/shoelace@2.4.0/dist/components/details/details.js"
></script>
<!-- https://shoelace.style/getting-started/usage?id=waiting-for-components-to-load -->
<style>
	.sl-waiting {
		opacity: 0;
	}

	:global(.sl-ready) .sl-waiting {
		opacity: 1;
		transition: 0.25s opacity;
	}
</style>
<script type="module">
	await Promise.allSettled([customElements.whenDefined('sl-details')]);
	document.body.classList.add('sl-ready');
</script>

<style>
	main {
		margin: auto;
		padding: 1.5rem;
	}
	h1 {
		font-size: 3rem;
		font-weight: 800;
		margin: 0;
	}
	.text-gradient {
		background-image: var(--accent-gradient);
		-webkit-background-clip: text;
		-webkit-text-fill-color: transparent;
		background-size: 400%;
		background-position: 0%;
	}
	.instructions {
		line-height: 1.6;
		margin: 1rem 0;
		border: 1px solid rgba(var(--accent), 25%);
		background-color: white;
		padding: 1rem;
		border-radius: 0.4rem;
	}
</style>
<style is:global>
	:root {
		--accent: 124, 58, 237;
		--accent-gradient: linear-gradient(45deg, rgb(var(--accent)), #da62c4 30%, white 60%);
	}
	html {
		font-family: system-ui, sans-serif;
		background-color: #f6f6f6;
	}
	code {
		font-family: Menlo, Monaco, Lucida Console, Liberation Mono, DejaVu Sans Mono,
			Bitstream Vera Sans Mono, Courier New, monospace;
	}
</style>
