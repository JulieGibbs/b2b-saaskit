---
export type Props = {
	title: string;
	stepDone?: boolean;
	expanded?: boolean;
};

const { title, stepDone, expanded = false } = Astro.props;
---

<div class="w-full">
	<setup-step class="ml-5 md:ml-0 w-full flex cursor-pointer items-start relative">
		<div class="absolute top-5" data-icon>
			<svg class="w-4 h-4" viewBox="0 0 9 16" fill="none" xmlns="http://www.w3.org/2000/svg">
				<path
					d="M1 1L8 8L1 15"
					stroke="black"
					stroke-width="2"
					stroke-linecap="round"
					stroke-linejoin="round"></path>
			</svg>
		</div>
		<div
			class="flex-1 sm:ml-10 mx-6 p-3 bg-white rounded-xl shadow-[0_3px_10px_rgba(19,29,118,0.1)] flex flex-col max-w-[calc(100%-3rem)]"
		>
			<label class="flex items-center justify-between">
				<input type="checkbox" hidden checked={expanded} />
				<div class="text-lg font-semibold">{title}</div>
				{stepDone && <span>âœ…</span>}
			</label>
			<details-body
				class="ml-2 cursor-auto prose prose-a:text-blue-600 hover:prose-a:text-rose-500 visited:prose-a:text-fuchsia-600 break-words"
			>
				<slot />
			</details-body>
		</div>
	</setup-step>
</div>
<style>
	@supports selector(:has(a, b)) {
		[data-icon] {
			transition: transform 0.2s ease-in-out;
		}
		:has(input:checked) [data-icon] {
			transform: rotate(90deg);
		}
		details-body {
			overflow: hidden;
			max-height: 0;
			transition: all 0.25s linear;
		}
		:has(input:checked) details-body {
			margin-top: 1.5rem;
			max-height: var(--scroll-height);
		}
	}
</style>
<script>
	import { render, style, setAttribute } from 'solid-js/web';
	import { createSignal, createEffect, onCleanup } from 'solid-js';

	const App = (props: { el: SetupStep; details: HTMLElement; checkbox: HTMLInputElement }) => {
		// expand on click, but don't collapse on click inside details
		const [expanded, setExpanded] = createSignal(false);
		const handleOnClick = () => setExpanded((x) => !x);
		props.el.addEventListener('click', handleOnClick);
		onCleanup(() => props.el.removeEventListener('click', handleOnClick));
		const preventClick = (e: MouseEvent) => e.stopPropagation();
		props.details.addEventListener('click', preventClick);
		onCleanup(() => props.details.removeEventListener('click', preventClick));

		// keep max height in sync with the content
		const [scrollHeight, setScrollHeight] = createSignal(props.details.scrollHeight);
		createEffect(() => {
			style(props.details, { '--scroll-height': scrollHeight() + 'px' });
		});
		const onResize = () => setScrollHeight(props.details.scrollHeight);
		window.addEventListener('resize', onResize);
		onCleanup(() => window.removeEventListener('resize', onResize));

		// let CSS know if we're expanded
		createEffect(() => {
			setAttribute(props.checkbox, 'checked', expanded() ? '' : undefined);
		});
		return null;
	};
	class SetupStep extends HTMLElement {
		cleanup = () => {};
		connectedCallback() {
			const details = this.querySelector('details-body');
			if (details instanceof HTMLElement) {
				const checkbox = this.querySelector('input[type=checkbox]');
				if (checkbox instanceof HTMLInputElement) {
					this.cleanup = render(() => App({ el: this, details, checkbox }), this);
				} else {
					console.error('No <input type="checkbox"> found in <setup-step>');
				}
			} else {
				console.error('No <details-body> found in <setup-step>');
			}
		}
		disconnectedCallback() {
			this.cleanup();
		}
	}
	customElements.define('setup-step', SetupStep);
</script>
