---
export type Props = {
	title: string;
	stepDone?: boolean;
	expanded?: boolean;
};

const { title, stepDone, expanded = false } = Astro.props;
---

<div class="w-full">
	<setup-step
		data-expanded={expanded}
		class="ml-5 md:ml-0 w-full flex cursor-pointer items-start relative"
	>
		<div class="absolute top-5" data-icon>
			<svg class="w-4 h-4" viewBox="0 0 9 16" fill="none" xmlns="http://www.w3.org/2000/svg">
				<path
					d="M1 1L8 8L1 15"
					stroke="black"
					stroke-width="2"
					stroke-linecap="round"
					stroke-linejoin="round"></path>
			</svg>
		</div>
		<div
			class="flex-1 ml-10 p-3 bg-white rounded-xl shadow-[0_3px_10px_rgba(19,29,118,0.1)] flex flex-col"
		>
			<div class="flex items-center justify-between">
				<div class="text-lg font-semibold">{title}</div>
				{stepDone && <span>âœ…</span>}
			</div>
			<details-body
				class="ml-2 cursor-auto prose prose-a:text-blue-600 hover:prose-a:text-rose-500 visited:prose-a:text-fuchsia-600"
			>
				<slot />
			</details-body>
		</div>
	</setup-step>
</div>
<style>
	[data-icon] {
		transition: transform 0.2s ease-in-out;
	}
	[data-expanded] [data-icon] {
		transform: rotate(90deg);
	}
	details-body {
		overflow: hidden;
		max-height: 0;
		transition: all 0.25s linear;
	}
	[data-expanded] details-body {
		margin-top: 1.5rem;
		max-height: var(--scroll-height);
	}
</style>
<script>
	import { render } from 'solid-js/web';
	import { createSignal, createEffect, onCleanup } from 'solid-js';

	const App = (props: { el: SetupStep }) => {
		const [expanded, setExpanded] = createSignal(false);
		createEffect(() => {
			if (expanded()) {
				props.el.dataset.expanded = '';
			} else {
				delete props.el.dataset.expanded;
			}
		});
		createEffect(() => {
			const run = () => setExpanded((x) => !x);
			props.el.addEventListener('click', run);
			return () => props.el.removeEventListener('click', run);
		});
		createEffect(() => {
			const body = props.el.querySelector('details-body');
			if (body instanceof HTMLElement) {
				body.style.setProperty('--scroll-height', body.scrollHeight + 'px');
				const onResize = () => body.style.setProperty('--scroll-height', body.scrollHeight + 'px');
				window.addEventListener('resize', onResize);
				onCleanup(() => window.removeEventListener('resize', onResize));
				const run = (e: MouseEvent) => e.stopPropagation();
				body.addEventListener('click', run);
				onCleanup(() => body.removeEventListener('click', run));
			}
		});
		return null;
	};
	class SetupStep extends HTMLElement {
		cleanup = () => {};
		connectedCallback() {
			this.cleanup = render(() => App({ el: this }), this);
		}
		disconnectedCallback() {
			this.cleanup();
		}
	}
	customElements.define('setup-step', SetupStep);
</script>
